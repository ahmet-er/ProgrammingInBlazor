@page "/people"
@inject IPersonRepository personRepository
    <div class="row">
        <div class="col d-flex justify-content-start">
            <h3>Index People</h3>
        </div>

        <div class="form-group col d-flex justify-content-end">
            <a class="btn btn-primary" href="person/create">New Person</a>
        </div>
    </div>

    <GenericList List="People">
        <WholeListTemplate>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th></th>
                        <th>Name</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in People)
                    {
                        <tr>
                            <td>
                                <a class="btn btn-success" href="/person/edit/@item.Id">Edit</a>
                                <button class="btn btn-danger" @onclick="@(() => DeletePerson(item.Id))">Delete</button>
                            </td>
                            <td>@item.Name</td>
                        </tr>
                    }
                </tbody>
            </table>
        </WholeListTemplate>
    </GenericList>

    <div class="d-flex justify-content-end">
        <Pagination CurrentPage="@paginationDTO.Page" TotalAmountPages="totalAmountPages"
                    SelectedPage="SelectedPage" />
    </div>

    @code {
        List<Person> People;
        PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 10 };
        private int totalAmountPages;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                await LoadPeople();
            }
            catch (Exception ex)
            {

            }
        }

        private async Task LoadPeople()
        {
            var paginatedResponse = await personRepository.GetPeople(paginationDTO);
            People = paginatedResponse.Response;
            totalAmountPages = paginatedResponse.TotalAmountPages;
        }

        private async Task SelectedPage(int page)
        {
            paginationDTO.Page = page;
            await LoadPeople();
        }

        private async Task DeletePerson(int id)
        {
            await personRepository.DeletePerson(id);
            await LoadPeople();
        }
    }
